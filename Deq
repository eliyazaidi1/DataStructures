class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class Deque:
    def __init__(self):
        self.front = None
        self.rear = None

    def is_empty(self):
        return self.front is None and self.rear is None

    def add_front(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.front = self.rear = new_node
        else:
            new_node.next = self.front
            self.front.prev = new_node
            self.front = new_node

    def add_rear(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.front = self.rear = new_node
        else:
            new_node.prev = self.rear
            self.rear.next = new_node
            self.rear = new_node

    def remove_front(self):
        if self.is_empty():
            print("Deque is empty. Cannot remove from front.")
            return None

        data = self.front.data
        if self.front.next:
            self.front = self.front.next
            self.front.prev = None
        else:
            self.front = self.rear = None

        return data

    def remove_rear(self):
        if self.is_empty():
            print("Deque is empty. Cannot remove from rear.")
            return None

        data = self.rear.data
        if self.rear.prev:
            self.rear = self.rear.prev
            self.rear.next = None
        else:
            self.front = self.rear = None

        return data

    def display(self):
        if self.is_empty():
            print("Deque is empty.")
        else:
            current = self.front
            while current:
                print(current.data, end=" ")
                current = current.next
            print()


# Example usage:
deque = Deque()

# Add elements to the front and rear of the deque
deque.add_front(1)
deque.add_front(2)
deque.add_rear(3)
deque.add_rear(4)

# Display elements of the deque
deque.display()  # Output: 2 1 3 4

# Remove elements from the front and rear of the deque
removed_front = deque.remove_front()
removed_rear = deque.remove_rear()

print("Removed from front:", removed_front)  # Output: Removed from front: 2
print("Removed from rear:", removed_rear)    # Output: Removed from rear: 4

# Display elements of the updated deque
deque.display()  # Output: 1 3
