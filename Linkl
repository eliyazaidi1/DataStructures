class Node:
    def __init__(self,data):
      self.data = data
      self.next = None

class Sll:
    def __init__(self):
      self.head = None

    def display(self):
      if self.head==None:
        print('Linkedlist is empty')
      else:
        temp = self.head
        while(temp):
          print(temp.data)
          temp = temp.next

    def insert_at_end(self,data):
      ne = Node(data)
      if self.head==None:
        print('ll is empty so far')
        self.head = ne
      else:
        temp = self.head
        while temp.next:
           temp = temp.next
        temp.next = ne

    def insert_at_begin(self,data):
       nb = Node(data)
       if self.head == None:
         print('ll is empty')
         self.head = nb
       else:
         nb.next = self.head
         self.head = nb

    def insert_at_pos(self,data,pos):
       np = Node(data)
       if self.head == None:
        print('LL is empty to connect at that position')
       else:
        temp = self.head
        for i in range(pos-2):
            temp = temp.next
        np.next = temp.next
        temp.next = np

    def del_at_end(self):
     if self.head==None:
      print('ll is empty')
     else:
      temp = self.head
      while temp.next.next:
          temp = temp.next
      temp1 = temp.next
      temp.next = None
      del temp1

    def del_at_begin(self):
      if self.head==None:
        print('LL is empty')
      else:
        temp = self.head
        self.head = self.head.next
        del temp

    def del_at_pos(self,pos):
      if self.head==None:
        print('LL is empty')
      elif pos==1:
        self.del_at_begin()
      else:
          temp = self.head
          for i in range(pos-2):
            temp = temp.next
          temp.next = temp.next.next

    def counting(self):
      count = 0
      if self.head == None:
        print('LL is empty, 0 elements')
      else:
        temp = self.head
        while(temp):
           temp = temp.next
           count+=1
        return count

      def reverse(self):
        prev = None
        current = self.head

        while current:
            next_node = current.next 
            current.next = prev       
            prev = current           
            current = next_node     
        self.head = prev
